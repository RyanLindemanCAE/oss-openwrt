--- a/arch/mips/ath79/pci.c
+++ b/arch/mips/ath79/pci.c
@@ -53,6 +53,15 @@ static const struct ath79_pci_irq ar724x
 	}
 };
 
+static const struct ath79_pci_irq qca953x_pci_irq_map[] __initconst = {
+	{
+		.bus	= 0,
+		.slot	= 0,
+		.pin	= 1,
+		.irq	= ATH79_PCI_IRQ(0),
+	},
+};
+
 static const struct ath79_pci_irq qca955x_pci_irq_map[] __initconst = {
 	{
 		.bus	= 0,
@@ -83,6 +92,9 @@ int __init pcibios_map_irq(const struct
 			   soc_is_ar9344()) {
 			ath79_pci_irq_map = ar724x_pci_irq_map;
 			ath79_pci_nr_irqs = ARRAY_SIZE(ar724x_pci_irq_map);
+		} else if (soc_is_qca953x()) {
+			ath79_pci_irq_map = qca953x_pci_irq_map;
+			ath79_pci_nr_irqs = ARRAY_SIZE(qca953x_pci_irq_map);
 		} else if (soc_is_qca955x()) {
 			ath79_pci_irq_map = qca955x_pci_irq_map;
 			ath79_pci_nr_irqs = ARRAY_SIZE(qca955x_pci_irq_map);
@@ -285,6 +297,15 @@ int __init ath79_register_pci(void)
 						 AR724X_PCI_MEM_SIZE,
 						 0,
 						 ATH79_IP2_IRQ(0));
+	} else if (soc_is_qca953x()) {
+		pdev = ath79_register_pci_ar724x(0,
+						 QCA953X_PCI_CFG_BASE0,
+						 QCA953X_PCI_CTRL_BASE0,
+						 QCA953X_PCI_CRP_BASE0,
+						 QCA953X_PCI_MEM_BASE0,
+						 QCA953X_PCI_MEM_SIZE,
+						 0,
+						 ATH79_IP2_IRQ(0));
 	} else if (soc_is_qca9558()) {
 		pdev = ath79_register_pci_ar724x(0,
 						 QCA955X_PCI_CFG_BASE0,
--- a/arch/mips/include/asm/mach-ath79/ar71xx_regs.h
+++ b/arch/mips/include/asm/mach-ath79/ar71xx_regs.h
@@ -26,7 +26,7 @@
 #define AR71XX_GE1_BASE		0x1a000000
 #define AR71XX_GE1_SIZE		0x10000
 #define AR71XX_EHCI_BASE	0x1b000000
-#define AR71XX_EHCI_SIZE	0x1000
+#define AR71XX_EHCI_SIZE	0x200
 #define AR71XX_OHCI_BASE	0x1c000000
 #define AR71XX_OHCI_SIZE	0x1000
 #define AR71XX_SPI_BASE		0x1f000000
@@ -79,10 +79,10 @@
 #define AR724X_PCI_CTRL_SIZE	0x100
 
 #define AR724X_EHCI_BASE	0x1b000000
-#define AR724X_EHCI_SIZE	0x1000
+#define AR724X_EHCI_SIZE	0x200
 
 #define AR913X_EHCI_BASE	0x1b000000
-#define AR913X_EHCI_SIZE	0x1000
+#define AR913X_EHCI_SIZE	0x200
 #define AR913X_WMAC_BASE	(AR71XX_APB_BASE + 0x000C0000)
 #define AR913X_WMAC_SIZE	0x30000
 
@@ -93,7 +93,7 @@
 #define AR933X_WMAC_BASE	(AR71XX_APB_BASE + 0x00100000)
 #define AR933X_WMAC_SIZE	0x20000
 #define AR933X_EHCI_BASE	0x1b000000
-#define AR933X_EHCI_SIZE	0x1000
+#define AR933X_EHCI_SIZE	0x200
 
 #define AR934X_GMAC_BASE	(AR71XX_APB_BASE + 0x00070000)
 #define AR934X_GMAC_SIZE	0x14
@@ -106,8 +106,20 @@
 #define AR934X_SRIF_BASE	(AR71XX_APB_BASE + 0x00116000)
 #define AR934X_SRIF_SIZE	0x1000
 
+#define QCA953X_GMAC_BASE	(AR71XX_APB_BASE + 0x00070000)
+#define QCA953X_GMAC_SIZE	0x14
 #define QCA953X_WMAC_BASE	(AR71XX_APB_BASE + 0x00100000)
 #define QCA953X_WMAC_SIZE	0x20000
+#define QCA953X_EHCI_BASE	0x1b000000
+#define QCA953X_EHCI_SIZE	0x200
+#define QCA953X_SRIF_BASE	(AR71XX_APB_BASE + 0x00116000)
+#define QCA953X_SRIF_SIZE	0x1000
+
+#define QCA953X_PCI_CFG_BASE0	0x14000000
+#define QCA953X_PCI_CTRL_BASE0	(AR71XX_APB_BASE + 0x000f0000)
+#define QCA953X_PCI_CRP_BASE0	(AR71XX_APB_BASE + 0x000c0000)
+#define QCA953X_PCI_MEM_BASE0	0x10000000
+#define QCA953X_PCI_MEM_SIZE	0x02000000
 
 #define QCA955X_PCI_MEM_BASE0	0x10000000
 #define QCA955X_PCI_MEM_BASE1	0x12000000
@@ -177,6 +189,12 @@
 #define AR934X_DDR_REG_FLUSH_PCIE	0xa8
 #define AR934X_DDR_REG_FLUSH_WMAC	0xac
 
+#define QCA953X_DDR_REG_FLUSH_GE0	0x9c
+#define QCA953X_DDR_REG_FLUSH_GE1	0xa0
+#define QCA953X_DDR_REG_FLUSH_USB	0xa4
+#define QCA953X_DDR_REG_FLUSH_PCIE	0xa8
+#define QCA953X_DDR_REG_FLUSH_WMAC	0xac
+
 /*
  * PLL block
  */
@@ -286,6 +304,7 @@
 #define QCA953X_PLL_CPU_CONFIG_REG		0x00
 #define QCA953X_PLL_DDR_CONFIG_REG		0x04
 #define QCA953X_PLL_CLK_CTRL_REG		0x08
+#define QCA953X_PLL_SWITCH_CLOCK_CTRL_REG	0x24
 #define QCA953X_PLL_ETH_XMII_CONTROL_REG	0x2c
 #define QCA953X_PLL_ETH_SGMII_CONTROL_REG	0x48
 
@@ -320,6 +339,8 @@
 #define QCA953X_PLL_CLK_CTRL_DDRCLK_FROM_DDRPLL		BIT(21)
 #define QCA953X_PLL_CLK_CTRL_AHBCLK_FROM_DDRPLL		BIT(24)
 
+#define QCA953X_PLL_SWITCH_CLOCK_CONTROL_MDIO_CLK_SEL	BIT(6)
+
 #define QCA955X_PLL_CPU_CONFIG_REG		0x00
 #define QCA955X_PLL_DDR_CONFIG_REG		0x04
 #define QCA955X_PLL_CLK_CTRL_REG		0x08
@@ -495,6 +516,28 @@
 #define AR934X_RESET_MBOX		BIT(1)
 #define AR934X_RESET_I2S		BIT(0)
 
+#define QCA953X_RESET_USB_EXT_PWR	BIT(29)
+#define QCA953X_RESET_EXTERNAL		BIT(28)
+#define QCA953X_RESET_RTC		BIT(27)
+#define QCA953X_RESET_FULL_CHIP		BIT(24)
+#define QCA953X_RESET_GE1_MDIO		BIT(23)
+#define QCA953X_RESET_GE0_MDIO		BIT(22)
+#define QCA953X_RESET_CPU_NMI		BIT(21)
+#define QCA953X_RESET_CPU_COLD		BIT(20)
+#define QCA953X_RESET_DDR		BIT(16)
+#define QCA953X_RESET_USB_PHY_PLL_PWD_EXT BIT(15)
+#define QCA953X_RESET_GE1_MAC		BIT(13)
+#define QCA953X_RESET_ETH_SWITCH_ANALOG	BIT(12)
+#define QCA953X_RESET_USB_PHY_ANALOG	BIT(11)
+#define QCA953X_RESET_HOST_DMA_INT	BIT(10)
+#define QCA953X_RESET_GE0_MAC		BIT(9)
+#define QCA953X_RESET_ETH_SWITCH	BIT(8)
+#define QCA953X_RESET_PCIE_PHY		BIT(7)
+#define QCA953X_RESET_PCIE		BIT(6)
+#define QCA953X_RESET_USB_HOST		BIT(5)
+#define QCA953X_RESET_USB_PHY		BIT(4)
+#define QCA953X_RESET_USBSUS_OVERRIDE	BIT(3)
+
 #define QCA955X_RESET_HOST		BIT(31)
 #define QCA955X_RESET_SLIC		BIT(30)
 #define QCA955X_RESET_HDMA		BIT(29)
@@ -548,7 +591,12 @@
 #define AR934X_BOOTSTRAP_SDRAM_DISABLED BIT(1)
 #define AR934X_BOOTSTRAP_DDR1		BIT(0)
 
+#define QCA953X_BOOTSTRAP_SW_OPTION2	BIT(12)
+#define QCA953X_BOOTSTRAP_SW_OPTION1	BIT(11)
+#define QCA953X_BOOTSTRAP_EJTAG_MODE	BIT(5)
 #define QCA953X_BOOTSTRAP_REF_CLK_40	BIT(4)
+#define QCA953X_BOOTSTRAP_SDRAM_DISABLED BIT(1)
+#define QCA953X_BOOTSTRAP_DDR1		BIT(0)
 
 #define QCA955X_BOOTSTRAP_REF_CLK_40	BIT(4)
 
@@ -570,6 +618,24 @@
 	 AR934X_PCIE_WMAC_INT_PCIE_RC1 | AR934X_PCIE_WMAC_INT_PCIE_RC2 | \
 	 AR934X_PCIE_WMAC_INT_PCIE_RC3)
 
+#define QCA953X_EXT_INT_WMAC_MISC		BIT(0)
+#define QCA953X_EXT_INT_WMAC_TX			BIT(1)
+#define QCA953X_EXT_INT_WMAC_RXLP		BIT(2)
+#define QCA953X_EXT_INT_WMAC_RXHP		BIT(3)
+#define QCA953X_EXT_INT_PCIE_RC1		BIT(4)
+#define QCA953X_EXT_INT_PCIE_RC1_INT0		BIT(5)
+#define QCA953X_EXT_INT_PCIE_RC1_INT1		BIT(6)
+#define QCA953X_EXT_INT_PCIE_RC1_INT2		BIT(7)
+#define QCA953X_EXT_INT_PCIE_RC1_INT3		BIT(8)
+#define QCA953X_EXT_INT_WMAC_ALL \
+	(QCA953X_EXT_INT_WMAC_MISC | QCA953X_EXT_INT_WMAC_TX | \
+	 QCA953X_EXT_INT_WMAC_RXLP | QCA953X_EXT_INT_WMAC_RXHP)
+
+#define QCA953X_EXT_INT_PCIE_RC1_ALL \
+	(QCA953X_EXT_INT_PCIE_RC1 | QCA953X_EXT_INT_PCIE_RC1_INT0 | \
+	 QCA953X_EXT_INT_PCIE_RC1_INT1 | QCA953X_EXT_INT_PCIE_RC1_INT2 | \
+	 QCA953X_EXT_INT_PCIE_RC1_INT3)
+
 #define QCA955X_EXT_INT_WMAC_MISC		BIT(0)
 #define QCA955X_EXT_INT_WMAC_TX			BIT(1)
 #define QCA955X_EXT_INT_WMAC_RXLP		BIT(2)
@@ -687,15 +753,29 @@
 #define AR934X_GPIO_REG_OUT_FUNC3	0x38
 #define AR934X_GPIO_REG_OUT_FUNC4	0x3c
 #define AR934X_GPIO_REG_OUT_FUNC5	0x40
+#define AR934X_GPIO_REG_IN_ENABLE0	0x44
+#define AR934X_GPIO_REG_IN_ENABLE1	0x48
+#define AR934X_GPIO_REG_IN_ENABLE2	0x4C
+#define AR934X_GPIO_REG_IN_ENABLE3	0x50
+#define AR934X_GPIO_REG_IN_ENABLE4	0x54
+#define AR934X_GPIO_REG_IN_ENABLE9	0x68
 #define AR934X_GPIO_REG_FUNC		0x6c
 
+#define QCA953X_GPIO_REG_OUT_FUNC0	0x2c
+#define QCA953X_GPIO_REG_OUT_FUNC1	0x30
+#define QCA953X_GPIO_REG_OUT_FUNC2	0x34
+#define QCA953X_GPIO_REG_OUT_FUNC3	0x38
+#define QCA953X_GPIO_REG_OUT_FUNC4	0x3c
+#define QCA953X_GPIO_REG_IN_ENABLE0	0x44
+#define QCA953X_GPIO_REG_FUNC		0x6c
+
 #define AR71XX_GPIO_COUNT		16
 #define AR7240_GPIO_COUNT		18
 #define AR7241_GPIO_COUNT		20
 #define AR913X_GPIO_COUNT		22
 #define AR933X_GPIO_COUNT		30
 #define AR934X_GPIO_COUNT		23
-#define QCA953X_GPIO_COUNT		24
+#define QCA953X_GPIO_COUNT		18
 #define QCA955X_GPIO_COUNT		24
 
 /*
@@ -817,6 +897,24 @@
 
 #define AR934X_NAND_CMD_END_INT		BIT(1)
 
+#define QCA953X_SRIF_CPU_DPLL1_REG	0x1c0
+#define QCA953X_SRIF_CPU_DPLL2_REG	0x1c4
+#define QCA953X_SRIF_CPU_DPLL3_REG	0x1c8
+
+#define QCA953X_SRIF_DDR_DPLL1_REG	0x240
+#define QCA953X_SRIF_DDR_DPLL2_REG	0x244
+#define QCA953X_SRIF_DDR_DPLL3_REG	0x248
+
+#define QCA953X_SRIF_DPLL1_REFDIV_SHIFT	27
+#define QCA953X_SRIF_DPLL1_REFDIV_MASK	0x1f
+#define QCA953X_SRIF_DPLL1_NINT_SHIFT	18
+#define QCA953X_SRIF_DPLL1_NINT_MASK	0x1ff
+#define QCA953X_SRIF_DPLL1_NFRAC_MASK	0x0003ffff
+
+#define QCA953X_SRIF_DPLL2_LOCAL_PLL	BIT(30)
+#define QCA953X_SRIF_DPLL2_OUTDIV_SHIFT	13
+#define QCA953X_SRIF_DPLL2_OUTDIV_MASK	0x7
+
 #define AR71XX_GPIO_FUNC_STEREO_EN		BIT(17)
 #define AR71XX_GPIO_FUNC_SLIC_EN		BIT(16)
 #define AR71XX_GPIO_FUNC_SPI_CS2_EN		BIT(13)
@@ -884,14 +982,44 @@
 #define AR934X_GPIO_FUNC_CLK_OBS0_EN		BIT(2)
 #define AR934X_GPIO_FUNC_JTAG_DISABLE		BIT(1)
 
-#define AR934X_GPIO_OUT_GPIO		0
-#define AR934X_GPIO_OUT_LED_LINK0	41
-#define AR934X_GPIO_OUT_LED_LINK1	42
-#define AR934X_GPIO_OUT_LED_LINK2	43
-#define AR934X_GPIO_OUT_LED_LINK3	44
-#define AR934X_GPIO_OUT_LED_LINK4	45
-#define AR934X_GPIO_OUT_EXT_LNA0	46
-#define AR934X_GPIO_OUT_EXT_LNA1	47
+#define AR934X_GPIO_OUT_GPIO			0
+#define AR934X_GPIO_OUT_MUX_SPI_CS1		7
+#define AR934X_GPIO_OUT_MUX_SPI_CS2		8
+#define AR934X_GPIO_OUT_MUX_SPI_CS0		9
+#define AR934X_GPIO_OUT_MUX_SPI_CLK		10
+#define AR934X_GPIO_OUT_MUX_SPI_MOSI		11
+#define AR934X_GPIO_OUT_MUX_I2S_CLK		12
+#define AR934X_GPIO_OUT_MUX_I2S_WS		13
+#define AR934X_GPIO_OUT_MUX_I2S_SD		14
+#define AR934X_GPIO_OUT_MUX_I2S_SD		14
+#define AR934X_GPIO_OUT_MUX_SPDIF_OUT		25
+#define AR934X_GPIO_OUT_LED_LINK0		41
+#define AR934X_GPIO_OUT_LED_LINK1		42
+#define AR934X_GPIO_OUT_LED_LINK2		43
+#define AR934X_GPIO_OUT_LED_LINK3		44
+#define AR934X_GPIO_OUT_LED_LINK4		45
+#define AR934X_GPIO_OUT_EXT_LNA0		46
+#define AR934X_GPIO_OUT_EXT_LNA1		47
+#define AR934X_GPIO_IN_MUX_SPI_MISO		0
+#define AR934X_GPIO_IN_MUX_UART0_SIN		1
+#define AR934X_GPIO_IN_MUX_I2S_WS		4
+#define AR934X_GPIO_IN_MUX_I2S_MIC_SD		5
+#define AR934X_GPIO_IN_MUX_I2S_CLK		6
+#define AR934X_GPIO_IN_MUX_I2S_MCK		7
+#define AR934X_GPIO_IN_MUX_I2S_ETH_RX_ERR	8
+#define AR934X_GPIO_IN_MUX_I2S_ETH_RX_COL	9
+#define AR934X_GPIO_IN_MUX_I2S_ETH_RX_CRS	10
+
+#define QCA953X_GPIO_OUT_MUX_SPI_CS1	10
+#define QCA953X_GPIO_OUT_MUX_SPI_CS2	11
+#define QCA953X_GPIO_OUT_MUX_SPI_CS0	9
+#define QCA953X_GPIO_OUT_MUX_SPI_CLK	8
+#define QCA953X_GPIO_OUT_MUX_SPI_MOSI	12
+#define QCA953X_GPIO_OUT_MUX_LED_LINK1	41
+#define QCA953X_GPIO_OUT_MUX_LED_LINK2	42
+#define QCA953X_GPIO_OUT_MUX_LED_LINK3	43
+#define QCA953X_GPIO_OUT_MUX_LED_LINK4	44
+#define QCA953X_GPIO_OUT_MUX_LED_LINK5	45
 
 /*
  * MII_CTRL block
@@ -946,13 +1074,23 @@
 #define AR934X_ETH_CFG_SW_PHY_SWAP	BIT(7)
 #define AR934X_ETH_CFG_SW_APB_ACCESS	BIT(9)
 #define AR934X_ETH_CFG_RMII_GMAC0	BIT(10)
-#define AR933X_ETH_CFG_MII_CNTL_SPEED	BIT(11)
+#define AR934X_ETH_CFG_MII_CNTL_SPEED	BIT(11)
 #define AR934X_ETH_CFG_RMII_GMAC0_MASTER BIT(12)
-#define AR933X_ETH_CFG_SW_ACC_MSB_FIRST	BIT(13)
+#define AR934X_ETH_CFG_SW_ACC_MSB_FIRST	BIT(13)
 #define AR934X_ETH_CFG_RXD_DELAY        BIT(14)
 #define AR934X_ETH_CFG_RDV_DELAY        BIT(16)
 
 /*
+ * QCA953X GMAC Interface
+ */
+#define QCA953X_GMAC_REG_ETH_CFG	0x00
+
+#define QCA953X_ETH_CFG_SW_ONLY_MODE	BIT(6)
+#define QCA953X_ETH_CFG_SW_PHY_SWAP	BIT(7)
+#define QCA953X_ETH_CFG_SW_APB_ACCESS	BIT(9)
+#define QCA953X_ETH_CFG_SW_ACC_MSB_FIRST	BIT(13)
+
+/*
  * QCA955X GMAC Interface
  */
 
--- a/arch/mips/ath79/dev-wmac.c
+++ b/arch/mips/ath79/dev-wmac.c
@@ -280,7 +280,7 @@ bool __init ar93xx_wmac_read_mac_address
 	u8 mac[6] = { 0x00, 0x02, 0x03, 0x04, 0x05, 0x06 };
 	int mac_start = 2, mac_end = 8;
 
-	BUG_ON(!soc_is_ar933x() && !soc_is_ar934x());
+	BUG_ON(!soc_is_ar933x() && !soc_is_ar934x() && !soc_is_qca953x());
 	base = ioremap_nocache(AR933X_WMAC_BASE, AR933X_WMAC_SIZE);
 	while (addr > sizeof(hdr)) {
 		if (!ar93xx_wmac_otp_read(base, addr, hdr, sizeof(hdr)))
--- a/arch/mips/ath79/gpio.c
+++ b/arch/mips/ath79/gpio.c
@@ -94,6 +94,31 @@ static int ath79_gpio_direction_output(s
 	return 0;
 }
 
+int ath79_gpio_direction_select(unsigned gpio, bool oe)
+{
+	void __iomem *base = ath79_gpio_base;
+	unsigned long flags;
+	bool ieq_1 = (soc_is_ar934x() ||
+			soc_is_qca953x() ||
+			soc_is_qca955x());
+
+	if (gpio >= ath79_gpio_count)
+		return -1;
+
+	spin_lock_irqsave(&ath79_gpio_lock, flags);
+
+	if ((ieq_1 && oe) || (!ieq_1 && !oe))
+		__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_OE) & ~(1 << gpio),
+				base + AR71XX_GPIO_REG_OE);
+	else
+		__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_OE) | (1 << gpio),
+				base + AR71XX_GPIO_REG_OE);
+
+	spin_unlock_irqrestore(&ath79_gpio_lock, flags);
+
+	return 0;
+}
+
 static int ar934x_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
 {
 	void __iomem *base = ath79_gpio_base;
@@ -148,7 +173,7 @@ static void __iomem *ath79_gpio_get_func
 	    soc_is_ar913x() ||
 	    soc_is_ar933x())
 		reg = AR71XX_GPIO_REG_FUNC;
-	else if (soc_is_ar934x())
+	else if (soc_is_ar934x() || soc_is_qca953x())
 		reg = AR934X_GPIO_REG_FUNC;
 	else
 		BUG();
@@ -180,31 +205,174 @@ void ath79_gpio_function_disable(u32 mas
 	ath79_gpio_function_setup(0, mask);
 }
 
-void __init ath79_gpio_output_select(unsigned gpio, u8 val)
+static void ar934x_gpio_input_select(unsigned gpio, u8 val)
 {
 	void __iomem *base = ath79_gpio_base;
-	unsigned long flags;
 	unsigned int reg;
 	u32 t, s;
 
+	reg = AR934X_GPIO_REG_IN_ENABLE0 + 4 * (val / 4);
+	s = 8 * (val % 4);
+
+	t = __raw_readl(base + reg);
+	t &= ~(0xff << s);
+	t |= gpio << s;
+	__raw_writel(t, base + reg);
+
+	/* flush write */
+	(void) __raw_readl(base + reg);
+}
+
+void __init ath79_gpio_input_select(unsigned gpio, u8 val)
+{
+	unsigned long flags;
+
 	BUG_ON(!soc_is_ar934x());
 
-	if (gpio >= AR934X_GPIO_COUNT)
+	if (gpio >= ath79_gpio_count)
 		return;
 
+	spin_lock_irqsave(&ath79_gpio_lock, flags);
+	ar934x_gpio_input_select(gpio, val);
+	spin_unlock_irqrestore(&ath79_gpio_lock, flags);
+}
+
+static bool jtag_disabled = false;
+static uint8_t gpio_outs[32];
+
+static void ar934x_gpio_output_select(unsigned gpio, u8 val)
+{
+	void __iomem *base = ath79_gpio_base;
+	unsigned int reg;
+	u32 t, s;
+
+	if (!jtag_disabled && gpio <= 3) {
+		/* disable JTAG before enabling GPIO 0-3 */
+		__raw_writel(__raw_readl(base + AR934X_GPIO_REG_FUNC) | BIT(1),
+			base + AR934X_GPIO_REG_FUNC);
+		jtag_disabled = true;
+	}
+
 	reg = AR934X_GPIO_REG_OUT_FUNC0 + 4 * (gpio / 4);
 	s = 8 * (gpio % 4);
 
-	spin_lock_irqsave(&ath79_gpio_lock, flags);
-
 	t = __raw_readl(base + reg);
+	gpio_outs[gpio] = (uint8_t)(t >> s);
 	t &= ~(0xff << s);
 	t |= val << s;
 	__raw_writel(t, base + reg);
 
 	/* flush write */
 	(void) __raw_readl(base + reg);
+}
+
+static void ar934x_gpio_output_deselect(unsigned gpio)
+{
+	void __iomem *base = ath79_gpio_base;
+	unsigned int reg;
+	u32 t, s;
+
+	if (!gpio_outs[gpio])
+		return;
+
+	reg = AR934X_GPIO_REG_OUT_FUNC0 + 4 * (gpio / 4);
+	s = 8 * (gpio % 4);
+
+	t = __raw_readl(base + reg);
+	__raw_writel((t & ~(0xff << s)) | (gpio_outs[gpio] << s), base + reg);
+
+	/* flush write */
+	(void) __raw_readl(base + reg);
+
+	gpio_outs[gpio] = 0;
+}
+
+void __init ath79_gpio_output_select(unsigned gpio, u8 val)
+{
+	unsigned long flags;
+
+	BUG_ON(!soc_is_ar934x() && !soc_is_qca953x());
+
+	if (gpio >= ath79_gpio_count)
+		return;
 
+	spin_lock_irqsave(&ath79_gpio_lock, flags);
+	ar934x_gpio_output_select(gpio, val);
+	spin_unlock_irqrestore(&ath79_gpio_lock, flags);
+}
+
+#define GPIO_INPUT_NOMUX	0
+static uint8_t gpio_ins[32];
+
+static void ar934x_gpio_input_mux(unsigned gpio)
+{
+	void __iomem *base = ath79_gpio_base;
+	unsigned int reg, v, i;
+
+	if (gpio == GPIO_INPUT_NOMUX)
+		return;
+
+	for (reg = AR934X_GPIO_REG_IN_ENABLE0; reg<= AR934X_GPIO_REG_IN_ENABLE9; reg += 4) {
+		/* TODO: Could shadow these registers to save some cycles */
+		v = __raw_readl(base + reg);
+		for (i = 0; i < 4; i++) {
+			if (((v >> (i * 8)) & 0xff) != gpio) /* big-endian */
+				continue;
+			gpio_ins[gpio] = (reg - AR934X_GPIO_REG_IN_ENABLE0) + i;
+			__raw_writel((v & ~(0xff << (i * 8))) | (GPIO_INPUT_NOMUX << (i * 8)), base + reg);
+			return;
+		}
+	}
+}
+
+static void ar934x_gpio_input_demux(unsigned gpio)
+{
+	void __iomem *base = ath79_gpio_base;
+	unsigned int reg;
+	u32 s, t;
+
+	if (gpio_ins[gpio] == 0xff)
+		return;
+
+	reg = AR934X_GPIO_REG_IN_ENABLE0 + 4 * (gpio_ins[gpio] / 4);
+	s = 8 * (gpio_ins[gpio] % 4);
+	t = __raw_readl(base + reg);
+	__raw_writel((t & ~(0xff << s)) | (gpio << s), base + reg);
+	gpio_ins[gpio] = -1;
+}
+uint32_t gpio_outval;
+uint32_t gpio_was_output;
+
+static int ar934x_gpio_request(struct gpio_chip *chip, unsigned offset)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&ath79_gpio_lock, flags);
+	gpio_outval &= ~(1 << offset);
+	gpio_outval |= __raw_readl(ath79_gpio_base + AR71XX_GPIO_REG_OUT) & (1 << offset);
+	gpio_was_output &= ~(1 << offset);
+	gpio_was_output |= __raw_readl(ath79_gpio_base + AR71XX_GPIO_REG_OE) & (1 << offset);
+	ar934x_gpio_output_select(offset, 0);
+	ar934x_gpio_input_mux(offset);
+	spin_unlock_irqrestore(&ath79_gpio_lock, flags);
+	return 0;
+}
+
+static void ar934x_gpio_free(struct gpio_chip *chip, unsigned offset)
+{
+	unsigned long flags;
+	u32 t;
+
+	spin_lock_irqsave(&ath79_gpio_lock, flags);
+	ar934x_gpio_input_demux(offset);
+	ar934x_gpio_output_deselect(offset);
+	t = __raw_readl(ath79_gpio_base + AR71XX_GPIO_REG_OE);
+	if (gpio_outval & (1 << offset))
+		__raw_writel(1 << offset, ath79_gpio_base + AR71XX_GPIO_REG_SET);
+	else __raw_writel(1 << offset, ath79_gpio_base + AR71XX_GPIO_REG_CLEAR);
+	if (gpio_was_output & (1 << offset))
+		__raw_writel(t |  (1 << offset), ath79_gpio_base + AR71XX_GPIO_REG_OE);
+	else __raw_writel(t & ~(1 << offset), ath79_gpio_base + AR71XX_GPIO_REG_OE);
 	spin_unlock_irqrestore(&ath79_gpio_lock, flags);
 }
 
@@ -236,6 +404,9 @@ void __init ath79_gpio_init(void)
 	if (soc_is_ar934x() || soc_is_qca953x() || soc_is_qca955x()) {
 		ath79_gpio_chip.direction_input = ar934x_gpio_direction_input;
 		ath79_gpio_chip.direction_output = ar934x_gpio_direction_output;
+		ath79_gpio_chip.request = ar934x_gpio_request;
+		ath79_gpio_chip.free = ar934x_gpio_free;
+		memset(gpio_ins, -1, sizeof(gpio_ins));
 	}
 
 	err = gpiochip_add(&ath79_gpio_chip);
--- a/arch/mips/ath79/common.h
+++ b/arch/mips/ath79/common.h
@@ -26,7 +26,9 @@ void ath79_ddr_wb_flush(unsigned int reg
 void ath79_gpio_function_enable(u32 mask);
 void ath79_gpio_function_disable(u32 mask);
 void ath79_gpio_function_setup(u32 set, u32 clear);
+void ath79_gpio_input_select(unsigned gpio, u8 val);
 void ath79_gpio_output_select(unsigned gpio, u8 val);
+int ath79_gpio_direction_select(unsigned gpio, bool oe);
 void ath79_gpio_init(void);
 
 #endif /* __ATH79_COMMON_H */
--- a/arch/mips/ath79/irq.c
+++ b/arch/mips/ath79/irq.c
@@ -154,6 +154,27 @@ static void ar934x_ip2_irq_init(void)
 	irq_set_chained_handler(ATH79_CPU_IRQ(2), ar934x_ip2_irq_dispatch);
 }
 
+static void qca953x_ip2_irq_dispatch(unsigned int irq, struct irq_desc *desc)
+{
+	u32 status;
+
+	disable_irq_nosync(irq);
+
+	status = ath79_reset_rr(QCA953X_RESET_REG_EXT_INT_STATUS);
+
+	if (status & QCA953X_EXT_INT_PCIE_RC1_ALL) {
+		ath79_ddr_wb_flush(QCA953X_DDR_REG_FLUSH_PCIE);
+		generic_handle_irq(ATH79_IP2_IRQ(0));
+	} else if (status & QCA953X_EXT_INT_WMAC_ALL) {
+		ath79_ddr_wb_flush(QCA953X_DDR_REG_FLUSH_WMAC);
+		generic_handle_irq(ATH79_IP2_IRQ(1));
+	} else {
+		spurious_interrupt();
+	}
+
+	enable_irq(irq);
+}
+
 static void qca955x_ip2_irq_dispatch(unsigned int irq, struct irq_desc *desc)
 {
 	u32 status;
@@ -217,6 +238,18 @@ enable:
 	enable_irq(irq);
 }
 
+static void qca953x_irq_init(void)
+{
+	int i;
+
+	for(i = ATH79_IP2_IRQ_BASE;
+	    i < ATH79_IP2_IRQ_BASE + ATH79_IP2_IRQ_COUNT; i++)
+		irq_set_chip_and_handler(i, &dummy_irq_chip,
+					 handle_level_irq);
+
+	irq_set_chained_handler(ATH79_CPU_IRQ(2), qca953x_ip2_irq_dispatch);
+}
+
 static void qca955x_irq_init(void)
 {
 	int i;
@@ -336,6 +369,12 @@ static void ar934x_ip3_handler(void)
 	do_IRQ(ATH79_CPU_IRQ(3));
 }
 
+static void qca953x_ip3_handler(void)
+{
+	ath79_ddr_wb_flush(QCA953X_DDR_REG_FLUSH_USB);
+	do_IRQ(ATH79_CPU_IRQ(3));
+}
+
 void __init arch_init_irq(void)
 {
 	if (soc_is_ar71xx()) {
@@ -355,7 +394,7 @@ void __init arch_init_irq(void)
 		ath79_ip3_handler = ar934x_ip3_handler;
 	} else if (soc_is_qca953x()) {
 		ath79_ip2_handler = ath79_default_ip2_handler;
-		ath79_ip3_handler = ath79_default_ip3_handler;
+		ath79_ip3_handler = qca953x_ip3_handler;
 	} else if (soc_is_qca955x()) {
 		ath79_ip2_handler = ath79_default_ip2_handler;
 		ath79_ip3_handler = ath79_default_ip3_handler;
@@ -369,6 +408,8 @@ void __init arch_init_irq(void)
 
 	if (soc_is_ar934x())
 		ar934x_ip2_irq_init();
+        else if (soc_is_qca953x())
+		qca953x_irq_init();
 	else if (soc_is_qca955x())
 		qca955x_irq_init();
 }
--- a/arch/mips/ath79/clock.c
+++ b/arch/mips/ath79/clock.c
@@ -168,7 +168,7 @@ static void __init ar933x_clocks_init(vo
 	ath79_uart_clk.rate = ath79_ref_clk.rate;
 }
 
-static u32 __init ar934x_get_pll_freq(u32 ref, u32 ref_div, u32 nint, u32 nfrac,
+static u32 __init ar9xxx_get_pll_freq(u32 ref, u32 ref_div, u32 nint, u32 nfrac,
 				      u32 frac, u32 out_div)
 {
 	u64 t;
@@ -227,7 +227,7 @@ static void __init ar934x_clocks_init(vo
 		frac = 1 << 6;
 	}
 
-	cpu_pll = ar934x_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
+	cpu_pll = ar9xxx_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
 				      nfrac, frac, out_div);
 
 	pll = __raw_readl(dpll_base + AR934X_SRIF_DDR_DPLL2_REG);
@@ -254,7 +254,7 @@ static void __init ar934x_clocks_init(vo
 		frac = 1 << 10;
 	}
 
-	ddr_pll = ar934x_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
+	ddr_pll = ar9xxx_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
 				      nfrac, frac, out_div);
 
 	clk_ctrl = ath79_pll_rr(AR934X_PLL_CPU_DDR_CLK_CTRL_REG);
@@ -297,7 +297,7 @@ static void __init ar934x_clocks_init(vo
 
 static void __init qca953x_clocks_init(void)
 {
-	u32 pll, out_div, ref_div, nint, frac, clk_ctrl, postdiv;
+	u32 pll, out_div, ref_div, nint, nfrac, frac, clk_ctrl, postdiv;
 	u32 cpu_pll, ddr_pll;
 	u32 bootstrap;
 
@@ -314,12 +314,12 @@ static void __init qca953x_clocks_init(v
 		  QCA953X_PLL_CPU_CONFIG_REFDIV_MASK;
 	nint = (pll >> QCA953X_PLL_CPU_CONFIG_NINT_SHIFT) &
 	       QCA953X_PLL_CPU_CONFIG_NINT_MASK;
-	frac = (pll >> QCA953X_PLL_CPU_CONFIG_NFRAC_SHIFT) &
+	nfrac = (pll >> QCA953X_PLL_CPU_CONFIG_NFRAC_SHIFT) &
 	       QCA953X_PLL_CPU_CONFIG_NFRAC_MASK;
+	frac = 1 << 6;
 
-	cpu_pll = nint * ath79_ref_clk.rate / ref_div;
-	cpu_pll += frac * (ath79_ref_clk.rate >> 6) / ref_div;
-	cpu_pll /= (1 << out_div);
+	cpu_pll = ar9xxx_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
+				      nfrac, frac, out_div);
 
 	pll = ath79_pll_rr(QCA953X_PLL_DDR_CONFIG_REG);
 	out_div = (pll >> QCA953X_PLL_DDR_CONFIG_OUTDIV_SHIFT) &
@@ -328,12 +328,12 @@ static void __init qca953x_clocks_init(v
 		  QCA953X_PLL_DDR_CONFIG_REFDIV_MASK;
 	nint = (pll >> QCA953X_PLL_DDR_CONFIG_NINT_SHIFT) &
 	       QCA953X_PLL_DDR_CONFIG_NINT_MASK;
-	frac = (pll >> QCA953X_PLL_DDR_CONFIG_NFRAC_SHIFT) &
+	nfrac = (pll >> QCA953X_PLL_DDR_CONFIG_NFRAC_SHIFT) &
 	       QCA953X_PLL_DDR_CONFIG_NFRAC_MASK;
+	frac = 1 << 10;
 
-	ddr_pll = nint * ath79_ref_clk.rate / ref_div;
-	ddr_pll += frac * (ath79_ref_clk.rate >> 6) / (ref_div << 4);
-	ddr_pll /= (1 << out_div);
+	ddr_pll = ar9xxx_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
+				      nfrac, frac, out_div);
 
 	clk_ctrl = ath79_pll_rr(QCA953X_PLL_CLK_CTRL_REG);
 
@@ -373,7 +373,7 @@ static void __init qca953x_clocks_init(v
 
 static void __init qca955x_clocks_init(void)
 {
-	u32 pll, out_div, ref_div, nint, frac, clk_ctrl, postdiv;
+	u32 pll, out_div, ref_div, nint, nfrac, frac, clk_ctrl, postdiv;
 	u32 cpu_pll, ddr_pll;
 	u32 bootstrap;
 
@@ -390,12 +390,12 @@ static void __init qca955x_clocks_init(v
 		  QCA955X_PLL_CPU_CONFIG_REFDIV_MASK;
 	nint = (pll >> QCA955X_PLL_CPU_CONFIG_NINT_SHIFT) &
 	       QCA955X_PLL_CPU_CONFIG_NINT_MASK;
-	frac = (pll >> QCA955X_PLL_CPU_CONFIG_NFRAC_SHIFT) &
+	nfrac = (pll >> QCA955X_PLL_CPU_CONFIG_NFRAC_SHIFT) &
 	       QCA955X_PLL_CPU_CONFIG_NFRAC_MASK;
+	frac = 1 << 6;
 
-	cpu_pll = nint * ath79_ref_clk.rate / ref_div;
-	cpu_pll += frac * ath79_ref_clk.rate / (ref_div * (1 << 6));
-	cpu_pll /= (1 << out_div);
+	cpu_pll = ar9xxx_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
+				      nfrac, frac, out_div);
 
 	pll = ath79_pll_rr(QCA955X_PLL_DDR_CONFIG_REG);
 	out_div = (pll >> QCA955X_PLL_DDR_CONFIG_OUTDIV_SHIFT) &
@@ -404,12 +404,12 @@ static void __init qca955x_clocks_init(v
 		  QCA955X_PLL_DDR_CONFIG_REFDIV_MASK;
 	nint = (pll >> QCA955X_PLL_DDR_CONFIG_NINT_SHIFT) &
 	       QCA955X_PLL_DDR_CONFIG_NINT_MASK;
-	frac = (pll >> QCA955X_PLL_DDR_CONFIG_NFRAC_SHIFT) &
+	nfrac = (pll >> QCA955X_PLL_DDR_CONFIG_NFRAC_SHIFT) &
 	       QCA955X_PLL_DDR_CONFIG_NFRAC_MASK;
+	frac = 1 << 10;
 
-	ddr_pll = nint * ath79_ref_clk.rate / ref_div;
-	ddr_pll += frac * ath79_ref_clk.rate / (ref_div * (1 << 10));
-	ddr_pll /= (1 << out_div);
+	ddr_pll = ar9xxx_get_pll_freq(ath79_ref_clk.rate, ref_div, nint,
+				      nfrac, frac, out_div);
 
 	clk_ctrl = ath79_pll_rr(QCA955X_PLL_CLK_CTRL_REG);
 
--- a/arch/mips/ath79/dev-usb.c
+++ b/arch/mips/ath79/dev-usb.c
@@ -236,6 +236,26 @@ static void __init ar934x_usb_setup(void
 			   &ath79_ehci_pdata_v2, sizeof(ath79_ehci_pdata_v2));
 }
 
+static void __init qca953x_usb_setup(void)
+{
+	ath79_device_reset_set(QCA953X_RESET_USBSUS_OVERRIDE);
+	udelay(1000);
+
+	ath79_device_reset_clear(QCA953X_RESET_USB_PHY);
+	udelay(1000);
+
+	ath79_device_reset_clear(QCA953X_RESET_USB_PHY_ANALOG);
+	udelay(1000);
+
+	ath79_device_reset_clear(QCA953X_RESET_USB_HOST);
+	udelay(1000);
+
+	ath79_usb_register("ehci-platform", -1,
+			   QCA953X_EHCI_BASE, QCA953X_EHCI_SIZE,
+			   ATH79_CPU_IRQ(3),
+			   &ath79_ehci_pdata_v2, sizeof(ath79_ehci_pdata_v2));
+}
+
 static void qca955x_usb_reset_notifier(struct platform_device *pdev)
 {
 	u32 base;
@@ -286,6 +306,8 @@ void __init ath79_register_usb(void)
 		ar933x_usb_setup();
 	else if (soc_is_ar934x())
 		ar934x_usb_setup();
+        else if (soc_is_qca953x())
+		qca953x_usb_setup();
 	else if (soc_is_qca955x())
 		qca955x_usb_setup();
 	else
--- a/arch/mips/ath79/dev-eth.c
+++ b/arch/mips/ath79/dev-eth.c
@@ -197,6 +197,7 @@ void __init ath79_register_mdio(unsigned
 	case ATH79_SOC_AR7241:
 	case ATH79_SOC_AR9330:
 	case ATH79_SOC_AR9331:
+	case ATH79_SOC_QCA9531:
 	case ATH79_SOC_QCA9533:
 		mdio_dev = &ath79_mdio1_device;
 		mdio_data = &ath79_mdio1_data;
@@ -255,6 +256,7 @@ void __init ath79_register_mdio(unsigned
 		mdio_data->is_ar934x = 1;
 		break;
 
+	case ATH79_SOC_QCA9531:
 	case ATH79_SOC_QCA9533:
 		mdio_data->builtin_switch = 1;
 		break;
@@ -568,6 +570,7 @@ static void __init ath79_init_eth_pll_da
 	case ATH79_SOC_AR9341:
 	case ATH79_SOC_AR9342:
 	case ATH79_SOC_AR9344:
+	case ATH79_SOC_QCA9531:
 	case ATH79_SOC_QCA9533:
 	case ATH79_SOC_QCA9556:
 	case ATH79_SOC_QCA9558:
@@ -626,6 +629,7 @@ static int __init ath79_setup_phy_if_mod
 		case ATH79_SOC_AR7241:
 		case ATH79_SOC_AR9330:
 		case ATH79_SOC_AR9331:
+		case ATH79_SOC_QCA9531:
 		case ATH79_SOC_QCA9533:
 			pdata->phy_if_mode = PHY_INTERFACE_MODE_MII;
 			break;
@@ -687,6 +691,7 @@ static int __init ath79_setup_phy_if_mod
 		case ATH79_SOC_AR7241:
 		case ATH79_SOC_AR9330:
 		case ATH79_SOC_AR9331:
+		case ATH79_SOC_QCA9531:
 		case ATH79_SOC_QCA9533:
 			pdata->phy_if_mode = PHY_INTERFACE_MODE_GMII;
 			break;
@@ -991,6 +996,7 @@ void __init ath79_register_eth(unsigned
 			pdata->fifo_cfg3 = 0x01f00140;
 		break;
 
+	case ATH79_SOC_QCA9531:
 	case ATH79_SOC_QCA9533:
 		if (id == 0) {
 			pdata->reset_bit = AR933X_RESET_GE0_MAC |
@@ -1096,6 +1102,7 @@ void __init ath79_register_eth(unsigned
 		case ATH79_SOC_AR7241:
 		case ATH79_SOC_AR9330:
 		case ATH79_SOC_AR9331:
+		case ATH79_SOC_QCA9531:
 		case ATH79_SOC_QCA9533:
 			pdata->mii_bus_dev = &ath79_mdio1_device.dev;
 			break;
--- a/arch/mips/ath79/Kconfig
+++ b/arch/mips/ath79/Kconfig
@@ -1121,6 +1121,11 @@ config ATH79_DEV_SPI
 config ATH79_DEV_USB
 	def_bool n
 
+config ATH79_DEV_I2C
+	select I2C
+	select I2C_CHARDEV
+	def_bool n
+
 config ATH79_DEV_WMAC
 	depends on (SOC_AR913X || SOC_AR933X || SOC_AR934X || SOC_QCA953X || SOC_QCA955X)
 	def_bool n
--- a/arch/mips/ath79/Makefile
+++ b/arch/mips/ath79/Makefile
@@ -25,6 +25,7 @@ obj-$(CONFIG_ATH79_DEV_LEDS_GPIO)	+= dev
 obj-$(CONFIG_ATH79_DEV_M25P80)		+= dev-m25p80.o
 obj-$(CONFIG_ATH79_DEV_NFC)		+= dev-nfc.o
 obj-$(CONFIG_ATH79_DEV_SPI)		+= dev-spi.o
+obj-$(CONFIG_ATH79_DEV_I2C)		+= dev-i2c.o
 obj-$(CONFIG_ATH79_DEV_USB)		+= dev-usb.o
 obj-$(CONFIG_ATH79_DEV_WMAC)		+= dev-wmac.o
 
--- /dev/null
+++ b/arch/mips/ath79/dev-i2c.c
@@ -0,0 +1,27 @@
+/*
+ *  Atheros AR71XX/AR724X/AR913X I2C controller device
+ *
+ *  Copyright (c) 2013 The Linux Foundation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ */
+
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/platform_device.h>
+
+static struct platform_device ath79_i2c_gpio_device = {
+	.name		= "i2c-gpio",
+	.id		= 0,
+};
+
+void __init ath79_register_i2c(struct i2c_gpio_platform_data *pdata,
+				struct i2c_board_info const *info,
+				unsigned int n)
+{
+	i2c_register_board_info(0, info, n);
+	ath79_i2c_gpio_device.dev.platform_data = pdata;
+	platform_device_register(&ath79_i2c_gpio_device);
+}
--- /dev/null
+++ b/arch/mips/ath79/dev-i2c.h
@@ -0,0 +1,17 @@
+/*
+ *  Atheros AR71XX/AR724X/AR913X I2C controller device
+ *
+ *  Copyright (c) 2013 The Linux Foundation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ */
+#ifndef _ATH79_DEV_I2C_H_
+#define _ATH79_DEV_I2C_H_
+
+void ath79_register_i2c(struct i2c_gpio_platform_data *pdata,
+			struct i2c_board_info const *info,
+			unsigned int n);
+
+#endif /* _ATH79_DEV_I2C_H_ */
